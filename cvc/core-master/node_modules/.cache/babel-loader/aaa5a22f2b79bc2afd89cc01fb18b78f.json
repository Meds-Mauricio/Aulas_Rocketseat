{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\felip\\\\OneDrive\\\\Dokumente\\\\cvc\\\\core-master\\\\src\\\\MapBundle\\\\MapBundle.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport MarkerClusterer from \"react-google-maps/lib/components/addons/MarkerClusterer\";\nimport InfoBox from \"react-google-maps/lib/components/addons/InfoBox\";\nimport { Bubbly } from \"./styles\";\nimport map from \"../assets/img/map.png\";\nimport \"./styles.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar clusterStyles = [{\n  url: map,\n  height: 72,\n  width: 72,\n  textColor: \"#97007C\"\n}];\nvar MapGroup = withScriptjs(_c2 = withGoogleMap(_c = _s(function (_ref) {\n  _s();\n\n  var defaultData = _ref.defaultData,\n      data = _ref.data,\n      zoom = _ref.zoom,\n      active = _ref.active,\n      handleSelect = _ref.handleSelect,\n      handleMarkerCluster = _ref.handleMarkerCluster,\n      gridSize = _ref.gridSize,\n      maxZoom = _ref.maxZoom,\n      minimumClusterSize = _ref.minimumClusterSize,\n      onZoomChanged = _ref.onZoomChanged;\n  var mapRefs = useRef(null);\n\n  var onMarkerCluster = function onMarkerCluster(cluster) {\n    if (handleMarkerCluster) handleMarkerCluster(cluster.getMarkers());\n  };\n\n  var handleOnZoomChanged = function handleOnZoomChanged() {\n    if (onZoomChanged) onZoomChanged(mapRefs.current);\n  };\n\n  return data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: zoom,\n      defaultCenter: {\n        lat: defaultData.coordinates.latitude,\n        lng: defaultData.coordinates.longitude\n      },\n      options: {\n        streetViewControl: false,\n        fullscreenControl: false,\n        mapTypeControl: false\n      },\n      ref: mapRefs,\n      onZoomChanged: handleOnZoomChanged,\n      children: /*#__PURE__*/_jsxDEV(MarkerClusterer, {\n        averageCenter: true,\n        enableRetinaIcons: true,\n        gridSize: gridSize,\n        maxZoom: maxZoom,\n        minimumClusterSize: minimumClusterSize,\n        defaultStyles: clusterStyles,\n        onClick: function onClick(cluster) {\n          return onMarkerCluster(cluster);\n        },\n        children: data && data.map(function (item) {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            title: JSON.stringify(item),\n            name: item.id,\n            position: {\n              lat: item.coordinates.latitude,\n              lng: item.coordinates.longitude\n            },\n            visible: false,\n            children: /*#__PURE__*/_jsxDEV(InfoBox, {\n              options: {\n                closeBoxURL: \"\",\n                enableEventPropagation: true\n              },\n              children: /*#__PURE__*/_jsxDEV(Bubbly, {\n                active: active === item.id,\n                onClick: function onClick() {\n                  return handleSelect(item);\n                },\n                children: /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [\"R$ \", item.rate.totalPrice]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, _this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, _this)\n  }, void 0, false) : null;\n}, \"ozMLCqvcJTGFbU/mmVn9SUw7dUU=\")));\n_c3 = MapGroup;\nexport default MapGroup;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MapGroup$withScriptjs$withGoogleMap\");\n$RefreshReg$(_c2, \"MapGroup$withScriptjs\");\n$RefreshReg$(_c3, \"MapGroup\");","map":{"version":3,"sources":["C:/Users/felip/OneDrive/Dokumente/cvc/core-master/src/MapBundle/MapBundle.js"],"names":["React","useRef","withScriptjs","withGoogleMap","GoogleMap","Marker","MarkerClusterer","InfoBox","Bubbly","map","clusterStyles","url","height","width","textColor","MapGroup","defaultData","data","zoom","active","handleSelect","handleMarkerCluster","gridSize","maxZoom","minimumClusterSize","onZoomChanged","mapRefs","onMarkerCluster","cluster","getMarkers","handleOnZoomChanged","current","lat","coordinates","latitude","lng","longitude","streetViewControl","fullscreenControl","mapTypeControl","item","JSON","stringify","id","closeBoxURL","enableEventPropagation","rate","totalPrice"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n} from \"react-google-maps\";\nimport MarkerClusterer from \"react-google-maps/lib/components/addons/MarkerClusterer\";\nimport InfoBox from \"react-google-maps/lib/components/addons/InfoBox\";\nimport { Bubbly } from \"./styles\";\nimport map from \"../assets/img/map.png\";\nimport \"./styles.css\";\n\nconst clusterStyles = [\n    {\n        url: map,\n        height: 72,\n        width: 72,\n        textColor: \"#97007C\",\n    },\n];\n\nconst MapGroup = withScriptjs(\n    withGoogleMap(\n        ({\n            defaultData,\n            data,\n            zoom,\n            active,\n            handleSelect,\n            handleMarkerCluster,\n            gridSize,\n            maxZoom,\n            minimumClusterSize,\n            onZoomChanged,\n        }) => {\n            const mapRefs = useRef(null);\n\n            const onMarkerCluster = cluster => {\n                if (handleMarkerCluster) handleMarkerCluster(cluster.getMarkers());\n            };\n\n            const handleOnZoomChanged = () => {\n                if (onZoomChanged) onZoomChanged(mapRefs.current);\n            };\n\n            return data ? (\n                <>\n                    <GoogleMap\n                        defaultZoom={zoom}\n                        defaultCenter={{\n                            lat: defaultData.coordinates.latitude,\n                            lng: defaultData.coordinates.longitude,\n                        }}\n                        options={{\n                            streetViewControl: false,\n                            fullscreenControl: false,\n                            mapTypeControl: false,\n                        }}\n                        ref={mapRefs}\n                        onZoomChanged={handleOnZoomChanged}\n                    >\n                        <MarkerClusterer\n                            averageCenter\n                            enableRetinaIcons\n                            gridSize={gridSize}\n                            maxZoom={maxZoom}\n                            minimumClusterSize={minimumClusterSize}\n                            defaultStyles={clusterStyles}\n                            onClick={cluster => onMarkerCluster(cluster)}\n                        >\n                            {data &&\n                data.map(item => {\n                    return (\n                        <Marker\n                            title={JSON.stringify(item)}\n                            name={item.id}\n                            key={item.id}\n                            position={{\n                                lat: item.coordinates.latitude,\n                                lng: item.coordinates.longitude,\n                            }}\n                            visible={false}\n                        >\n                            <InfoBox\n                                options={{\n                                    closeBoxURL: \"\",\n                                    enableEventPropagation: true,\n                                }}\n                            >\n                                <Bubbly\n                                    active={active === item.id}\n                                    onClick={() => handleSelect(item)}\n                                >\n                                    <>R$ {item.rate.totalPrice}</>\n                                </Bubbly>\n                            </InfoBox>\n                        </Marker>\n                    );\n                })}\n                        </MarkerClusterer>\n                    </GoogleMap>\n                </>\n            ) : null;\n        }\n    )\n);\n\nexport default MapGroup;\n"]},"metadata":{},"sourceType":"module"}