{"ast":null,"code":"import _slicedToArray from \"C:/Users/felip/OneDrive/Dokumente/cvc/core-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:/Users/felip/OneDrive/Dokumente/cvc/core-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"name\", \"type\", \"maxLength\", \"placeholderText\", \"showTip\", \"infoMessage\", \"hasMask\", \"mask\", \"disabledInput\", \"shrink\"];\n\nvar _jsxFileName = \"C:\\\\Users\\\\felip\\\\OneDrive\\\\Dokumente\\\\cvc\\\\core-master\\\\src\\\\MyTravelLogin\\\\shared\\\\components\\\\Input\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/* eslint-disable react/jsx-no-duplicate-props */\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport VisibilityOffOutlined from \"@material-ui/icons/VisibilityOffOutlined\";\nimport VisibilityOutlined from \"@material-ui/icons/VisibilityOutlined\";\nimport { useField } from \"@unform/core\";\nimport ReactInputMask from \"react-input-mask\";\nimport MessageValidation from \"../MessageValidation\";\nimport useStyles from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Input = function Input(_ref) {\n  _s();\n\n  var name = _ref.name,\n      type = _ref.type,\n      maxLength = _ref.maxLength,\n      placeholderText = _ref.placeholderText,\n      showTip = _ref.showTip,\n      infoMessage = _ref.infoMessage,\n      hasMask = _ref.hasMask,\n      mask = _ref.mask,\n      disabledInput = _ref.disabledInput,\n      shrink = _ref.shrink,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useField = useField(name),\n      fieldName = _useField.fieldName,\n      registerField = _useField.registerField,\n      error = _useField.error,\n      defaultValue = _useField.defaultValue;\n\n  var classes = useStyles({\n    error: error\n  });\n  var inputRef = useRef(null);\n  var errorMessageRef = useRef(null);\n  var infoMessageRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showInfoMessage = _useState2[0],\n      setShowInfoMessage = _useState2[1];\n\n  var _useState3 = useState(type),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputType = _useState4[0],\n      setInputType = _useState4[1];\n\n  var _useState5 = useState(shrink),\n      _useState6 = _slicedToArray(_useState5, 2),\n      shrinkInput = _useState6[0],\n      setShrinkInput = _useState6[1];\n\n  useEffect(function () {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\"\n    });\n  }, [fieldName, registerField]);\n  var handleVisibility = useCallback(function (ref) {\n    if (ref.current.type === \"password\") {\n      ref.current.type = \"text\";\n      setInputType(\"hidePassword\");\n    } else {\n      ref.current.type = \"password\";\n      setInputType(\"password\");\n    }\n  }, []);\n  var handleShowInfoMessage = useCallback(function () {\n    setShrinkInput(true);\n\n    if (errorMessageRef && errorMessageRef.current) {\n      errorMessageRef.current.value = \"\";\n    }\n\n    if (error && error.split(\"\").length > 0) {\n      setShowInfoMessage(false);\n    } else {\n      setShowInfoMessage(showTip === true);\n    }\n  }, []);\n  var handleHideInfoMessage = useCallback(function () {\n    setShowInfoMessage(false);\n  }, []);\n\n  if (hasMask) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ReactInputMask, {\n        ref: inputRef,\n        defaultValue: defaultValue,\n        value: defaultValue,\n        disabled: disabledInput,\n        mask: mask || \"\",\n        onChange: handleHideInfoMessage,\n        onFocus: handleShowInfoMessage,\n        children: function children() {\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            name: name,\n            className: classes.input,\n            inputRef: inputRef,\n            margin: \"dense\",\n            defaultValue: defaultValue,\n            label: placeholderText,\n            variant: \"outlined\",\n            type: inputType,\n            disabled: disabledInput,\n            onClick: function onClick() {\n              return setShrinkInput(true);\n            },\n            value: defaultValue,\n            InputLabelProps: {\n              style: error ? {\n                color: \"#FF3344\"\n              } : {\n                color: \"\"\n              },\n              shrink: shrinkInput\n            },\n            InputProps: {\n              classes: {\n                root: classes.outlinedInput,\n                adornedEnd: classes.adornedEnd,\n                focused: classes.isFocused,\n                notchedOutline: error ? classes.notchedOutline : \"\"\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, _this), error && /*#__PURE__*/_jsxDEV(MessageValidation, {\n        ref: errorMessageRef,\n        isError: true,\n        message: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, _this), !error && type === \"password\" && showInfoMessage && /*#__PURE__*/_jsxDEV(MessageValidation, {\n        ref: infoMessageRef,\n        isInfo: true,\n        message: infoMessage || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, _this), !error && name === \"cpf\" && showInfoMessage && /*#__PURE__*/_jsxDEV(MessageValidation, {\n        ref: infoMessageRef,\n        isInfo: true,\n        message: infoMessage || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      name: name,\n      className: classes.input,\n      inputRef: inputRef,\n      margin: \"dense\",\n      label: placeholderText,\n      variant: \"outlined\",\n      type: inputType,\n      onChange: handleHideInfoMessage,\n      onFocus: handleShowInfoMessage,\n      onClick: function onClick() {\n        return setShrinkInput(true);\n      },\n      inputProps: {\n        maxLength: maxLength\n      },\n      InputLabelProps: {\n        style: error ? {\n          color: \"#FF3344\"\n        } : {\n          color: \"\"\n        },\n        shrink: shrinkInput\n      },\n      InputProps: {\n        endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [inputType === \"password\" && showTip === true && /*#__PURE__*/_jsxDEV(VisibilityOffOutlined, {\n            onClick: function onClick() {\n              return handleVisibility(inputRef);\n            },\n            className: classes.inputVisibilityIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }, _this), inputType === \"hidePassword\" && /*#__PURE__*/_jsxDEV(VisibilityOutlined, {\n            onClick: function onClick() {\n              return handleVisibility(inputRef);\n            },\n            className: classes.inputVisibilityIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, _this)]\n        }, void 0, true),\n        classes: {\n          root: classes.outlinedInput,\n          adornedEnd: classes.adornedEnd,\n          focused: classes.isFocused,\n          notchedOutline: error ? classes.notchedOutline : \"\"\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, _this), error && /*#__PURE__*/_jsxDEV(MessageValidation, {\n      ref: errorMessageRef,\n      isError: true,\n      message: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }, _this), !error && type === \"password\" && showInfoMessage && /*#__PURE__*/_jsxDEV(MessageValidation, {\n      ref: infoMessageRef,\n      isInfo: true,\n      message: infoMessage || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, _this), !error && name === \"cpf\" && showInfoMessage && /*#__PURE__*/_jsxDEV(MessageValidation, {\n      ref: infoMessageRef,\n      isInfo: true,\n      message: infoMessage || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Input, \"B9FR7RcUiUBqIc7Gjlde7gmJB08=\", false, function () {\n  return [useField, useStyles];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/felip/OneDrive/Dokumente/cvc/core-master/src/MyTravelLogin/shared/components/Input/index.tsx"],"names":["React","useCallback","useEffect","useRef","useState","TextField","VisibilityOffOutlined","VisibilityOutlined","useField","ReactInputMask","MessageValidation","useStyles","Input","name","type","maxLength","placeholderText","showTip","infoMessage","hasMask","mask","disabledInput","shrink","rest","fieldName","registerField","error","defaultValue","classes","inputRef","errorMessageRef","infoMessageRef","showInfoMessage","setShowInfoMessage","inputType","setInputType","shrinkInput","setShrinkInput","ref","current","path","handleVisibility","handleShowInfoMessage","value","split","length","handleHideInfoMessage","input","style","color","root","outlinedInput","adornedEnd","focused","isFocused","notchedOutline","endAdornment","inputVisibilityIcon"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-no-duplicate-props */\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport VisibilityOffOutlined from \"@material-ui/icons/VisibilityOffOutlined\";\nimport VisibilityOutlined from \"@material-ui/icons/VisibilityOutlined\";\nimport { useField } from \"@unform/core\";\nimport ReactInputMask, { Props as InputMaskProps } from \"react-input-mask\";\nimport MessageValidation from \"../MessageValidation\";\nimport useStyles from \"./styles\";\n\ninterface InputProps extends Omit<InputMaskProps, \"mask\"> {\n    name: string;\n    placeholderText: React.ReactElement | null | string;\n    type?: \"number\" | \"email\" | \"text\" | \"password\" | \"hidePassword\";\n    maxLength?: number;\n    showTip?: boolean;\n    infoMessage?: string;\n    hasMask?: boolean;\n    mask?: string | (string | RegExp)[]\n    disabledInput?: boolean\n    shrink?: boolean\n}\n\nconst Input: React.FC<InputProps> = ({\n    name,\n    type,\n    maxLength,\n    placeholderText,\n    showTip,\n    infoMessage,\n    hasMask,\n    mask,\n    disabledInput,\n    shrink,\n    ...rest\n}) => {\n    const { fieldName, registerField, error, defaultValue } = useField(name);\n    const classes = useStyles({ error });\n    const inputRef = useRef<any>(null);\n    const errorMessageRef = useRef<HTMLInputElement>(null);\n    const infoMessageRef = useRef<HTMLInputElement>(null);\n    const [showInfoMessage, setShowInfoMessage] = useState(false);\n    const [inputType, setInputType] = useState(type);\n    const [shrinkInput, setShrinkInput] = useState(shrink)\n\n    useEffect(() => {\n        registerField({\n            name: fieldName,\n            ref: inputRef.current,\n            path: \"value\",\n        });\n    }, [fieldName, registerField]);\n\n    const handleVisibility = useCallback((ref) => {\n        if (ref.current.type === \"password\") {\n            ref.current.type = \"text\";\n            setInputType(\"hidePassword\");\n        } else {\n            ref.current.type = \"password\";\n            setInputType(\"password\");\n        }\n    }, []);\n\n    const handleShowInfoMessage = useCallback(() => {\n        setShrinkInput(true)\n        if (errorMessageRef && errorMessageRef.current) {\n            errorMessageRef.current.value = \"\";\n        }\n        if (error && error.split(\"\").length > 0) {\n            setShowInfoMessage(false);\n        } else {\n            setShowInfoMessage(showTip === true);\n        }\n    }, []);\n\n    const handleHideInfoMessage = useCallback(() => {\n        setShowInfoMessage(false);\n    }, []);\n\n    if(hasMask){\n        return <>\n            <ReactInputMask\n                ref={inputRef}\n                defaultValue={defaultValue}\n                value={defaultValue}\n                disabled={disabledInput}\n                mask={mask || \"\"}\n                onChange={handleHideInfoMessage}\n                onFocus={handleShowInfoMessage}\n            >\n                {() =>  <TextField\n                    name={name}\n                    className={classes.input}\n                    inputRef={inputRef}\n                    margin=\"dense\"\n                    defaultValue={defaultValue}\n                    label={placeholderText}\n                    variant=\"outlined\"\n                    type={inputType}\n                    disabled={disabledInput}\n                    onClick={() => setShrinkInput(true)}\n                    value={defaultValue}\n                    InputLabelProps={{\n                        style: error ? { color: \"#FF3344\" } : { color: \"\" },\n                        shrink: shrinkInput,\n                    }}\n                    InputProps={{\n                        classes: {\n                            root: classes.outlinedInput,\n                            adornedEnd: classes.adornedEnd,\n                            focused: classes.isFocused,\n                            notchedOutline: error ? classes.notchedOutline : \"\"\n                        },\n                    }}\n                />\n                }\n            </ReactInputMask>\n            {error && (\n                <MessageValidation ref={errorMessageRef} isError message={error} />\n            )}\n            {!error && type === \"password\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n            {!error && name === \"cpf\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n        </>\n    }\n\n    return (\n        <>\n            <TextField\n                name={name}\n                className={classes.input}\n                inputRef={inputRef}\n                margin=\"dense\"\n                label={placeholderText}\n                variant=\"outlined\"\n                type={inputType}\n                onChange={handleHideInfoMessage}\n                onFocus={handleShowInfoMessage}\n                onClick={() => setShrinkInput(true)}\n                inputProps={{\n                    maxLength\n                }}\n                InputLabelProps={{\n                    style: error ? { color: \"#FF3344\" } : { color: \"\" },\n                    shrink: shrinkInput,\n                }}\n                InputProps={{\n                    endAdornment: <>\n                        {(inputType === \"password\" && showTip === true) &&\n                            <VisibilityOffOutlined onClick={() => handleVisibility(inputRef)}\n                                className={classes.inputVisibilityIcon}\n                            />\n                        }\n                        {inputType === \"hidePassword\" &&\n                            <VisibilityOutlined onClick={() => handleVisibility(inputRef)}\n                                className={classes.inputVisibilityIcon}\n                            />\n                        }\n                    </>,\n                    classes: {\n                        root: classes.outlinedInput,\n                        adornedEnd: classes.adornedEnd,\n                        focused: classes.isFocused,\n                        notchedOutline: error ? classes.notchedOutline : \"\"\n                    },\n                }}\n            />\n\n            {error && (\n                <MessageValidation ref={errorMessageRef} isError message={error} />\n            )}\n            {!error && type === \"password\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n\n            {!error && name === \"cpf\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n        </>\n    );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}