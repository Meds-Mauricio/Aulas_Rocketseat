{"ast":null,"code":"import _objectSpread from \"C:/Users/felip/OneDrive/Dokumente/cvc/core-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/felip/OneDrive/Dokumente/cvc/core-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\felip\\\\OneDrive\\\\Dokumente\\\\cvc\\\\core-master\\\\src\\\\Snackbar\\\\Stories\\\\Snackbar.stories.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"import React, { useState } from \\\"react\\\";\\nimport { Paper, Divider, } from \\\"@material-ui/core\\\";\\nimport Grid from \\\"@material-ui/core/Grid\\\";\\nimport { makeStyles , MuiThemeProvider } from \\\"@material-ui/core/styles\\\";\\nimport Typography from \\\"@material-ui/core/Typography\\\";\\nimport { storiesOf } from \\\"@storybook/react\\\";\\nimport Button from \\\"../../Button\\\";\\nimport themes from \\\"../../Theme/themes\\\";\\nimport { BrandType } from \\\"../../types/brand\\\";\\nimport Snackbar from \\\"../Snackbar\\\";\\n\\nconst useStyles = makeStyles((theme) => ({\\n    root: {\\n        background: theme.palette.background.default,\\n        boxShadow: theme.shadows[8],\\n        padding: \\\"30px\\\",\\n    },\\n    darkBg: {\\n        background: \\\"rgba(0, 0, 0, 0.6)\\\",\\n        boxShadow: theme.shadows[8],\\n        padding: \\\"30px\\\",\\n    },\\n}));\\n\\ntype SnackbarStoryProps = {\\n    mode: string\\n    brand: BrandType\\n    hasIcon: boolean\\n    hasBtn: boolean\\n    type: \\\"success\\\" | \\\"error\\\"\\n    labelClose: string\\n    message: string\\n}\\n\\nconst SnackbarStory = ({\\n    mode, brand, hasIcon, hasBtn, type, labelClose, message\\n}: SnackbarStoryProps) => {\\n    const classes = useStyles(themes[brand]);\\n    const [handleSuccess, setHandleSuccess] = useState(false);\\n\\n    return (\\n        <MuiThemeProvider theme={themes[brand]}>\\n            <Paper className={classes[mode]} id=\\\"Snackbar\\\">\\n                <Typography variant=\\\"h3\\\">Snackbar</Typography>\\n                <br />\\n                <Divider />\\n                <br />\\n                <Grid item xs={3}>\\n                    <Button\\n                        color=\\\"primary\\\"\\n                        label=\\\"Show\\\"\\n                        size=\\\"medium\\\"\\n                        variant=\\\"contained\\\"\\n                        onClick={() => setHandleSuccess(!handleSuccess)}\\n                    />\\n                </Grid>\\n                <Grid item xs={2}>\\n                    <Snackbar\\n                        message={message}\\n                        isOpen={handleSuccess}\\n                        hasBtn={hasBtn}\\n                        type={type}\\n                        hasIcon={hasIcon}\\n                        labelClose={labelClose}\\n                        close={() => setHandleSuccess(!handleSuccess)}\\n                    />\\n                </Grid>\\n            </Paper>\\n        </MuiThemeProvider>\\n\\n    );\\n};\\n\\nconst argsControls = {\\n    args: {\\n        brand: \\\"CVC\\\",\\n        mode: \\\"root\\\",\\n        hasIcon: true,\\n        hasBtn: true,\\n        type: \\\"success\\\",\\n        labelClose: \\\"Fechar\\\",\\n        message: \\\"Greyhound divisively hello\\\"\\n\\n    },\\n    argTypes: {\\n        brand: {\\n            type: \\\"select\\\",\\n            options: [\\\"BlackAndWhite\\\", \\\"BlackFriday\\\", \\\"CVC\\\", \\\"CVCCorp\\\", \\\"CVCYellow\\\", \\\"Sub\\\"]\\n        },\\n        mode: {\\n            type: \\\"select\\\",\\n            options: [\\\"root\\\", \\\"darkBg\\\"]\\n        },\\n        hasIcon: { type: \\\"boolean\\\" },\\n        hasBtn: { type: \\\"boolean\\\", },\\n        type: {\\n            control: { type: \\\"radio\\\" },\\n            options: [\\\"success\\\", \\\"error\\\"]\\n        },\\n        labelClose: { type: \\\"string\\\" },\\n        message: { type: \\\"string\\\" },\\n    }\\n}\\n\\nstoriesOf(\\\"Components/Snackbar\\\", module)\\n    .add(\\\"Default\\\", (args) => <SnackbarStory {...args}/>, argsControls);\\n\"; // @ts-ignore\n\nvar __LOCATIONS_MAP__ = {\n  \"default\": {\n    \"startLoc\": {\n      \"col\": 9,\n      \"line\": 106\n    },\n    \"endLoc\": {\n      \"col\": 70,\n      \"line\": 106\n    },\n    \"startBody\": {\n      \"col\": 20,\n      \"line\": 106\n    },\n    \"endBody\": {\n      \"col\": 56,\n      \"line\": 106\n    }\n  }\n};\nimport React, { useState } from \"react\";\nimport { Paper, Divider } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { storiesOf } from \"@storybook/react\";\nimport Button from \"../../Button\";\nimport themes from \"../../Theme/themes\";\nimport Snackbar from \"../Snackbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      background: theme.palette.background[\"default\"],\n      boxShadow: theme.shadows[8],\n      padding: \"30px\"\n    },\n    darkBg: {\n      background: \"rgba(0, 0, 0, 0.6)\",\n      boxShadow: theme.shadows[8],\n      padding: \"30px\"\n    }\n  };\n});\n\nvar SnackbarStory = function SnackbarStory(_ref) {\n  _s();\n\n  var mode = _ref.mode,\n      brand = _ref.brand,\n      hasIcon = _ref.hasIcon,\n      hasBtn = _ref.hasBtn,\n      type = _ref.type,\n      labelClose = _ref.labelClose,\n      message = _ref.message;\n  var classes = useStyles(themes[brand]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      handleSuccess = _useState2[0],\n      setHandleSuccess = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n    theme: themes[brand],\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes[mode],\n      id: \"Snackbar\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \"Snackbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          label: \"Show\",\n          size: \"medium\",\n          variant: \"contained\",\n          onClick: function onClick() {\n            return setHandleSuccess(!handleSuccess);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Snackbar, {\n          message: message,\n          isOpen: handleSuccess,\n          hasBtn: hasBtn,\n          type: type,\n          hasIcon: hasIcon,\n          labelClose: labelClose,\n          close: function close() {\n            return setHandleSuccess(!handleSuccess);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(SnackbarStory, \"Lmad94u5X/HzYY5Oq127OfP/IJ8=\", false, function () {\n  return [useStyles];\n});\n\n_c = SnackbarStory;\nvar argsControls = {\n  args: {\n    brand: \"CVC\",\n    mode: \"root\",\n    hasIcon: true,\n    hasBtn: true,\n    type: \"success\",\n    labelClose: \"Fechar\",\n    message: \"Greyhound divisively hello\"\n  },\n  argTypes: {\n    brand: {\n      type: \"select\",\n      options: [\"BlackAndWhite\", \"BlackFriday\", \"CVC\", \"CVCCorp\", \"CVCYellow\", \"Sub\"]\n    },\n    mode: {\n      type: \"select\",\n      options: [\"root\", \"darkBg\"]\n    },\n    hasIcon: {\n      type: \"boolean\"\n    },\n    hasBtn: {\n      type: \"boolean\"\n    },\n    type: {\n      control: {\n        type: \"radio\"\n      },\n      options: [\"success\", \"error\"]\n    },\n    labelClose: {\n      type: \"string\"\n    },\n    message: {\n      type: \"string\"\n    }\n  }\n};\nstoriesOf(\"Components/Snackbar\", module).addParameters({\n  storySource: {\n    source: __STORY__,\n    locationsMap: __LOCATIONS_MAP__\n  }\n}).add(\"Default\", function (args) {\n  return /*#__PURE__*/_jsxDEV(SnackbarStory, _objectSpread({}, args), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 31\n  }, _this);\n}, argsControls);\n\nvar _c;\n\n$RefreshReg$(_c, \"SnackbarStory\");","map":{"version":3,"sources":["C:/Users/felip/OneDrive/Dokumente/cvc/core-master/src/Snackbar/Stories/Snackbar.stories.tsx"],"names":["__STORY__","__LOCATIONS_MAP__","React","useState","Paper","Divider","Grid","makeStyles","MuiThemeProvider","Typography","storiesOf","Button","themes","Snackbar","useStyles","theme","root","background","palette","boxShadow","shadows","padding","darkBg","SnackbarStory","mode","brand","hasIcon","hasBtn","type","labelClose","message","classes","handleSuccess","setHandleSuccess","argsControls","args","argTypes","options","control","module","addParameters","storySource","source","locationsMap","add"],"mappings":"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","sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\nimport { Paper, Divider, } from \\\"@material-ui/core\\\";\\nimport Grid from \\\"@material-ui/core/Grid\\\";\\nimport { makeStyles , MuiThemeProvider } from \\\"@material-ui/core/styles\\\";\\nimport Typography from \\\"@material-ui/core/Typography\\\";\\nimport { storiesOf } from \\\"@storybook/react\\\";\\nimport Button from \\\"../../Button\\\";\\nimport themes from \\\"../../Theme/themes\\\";\\nimport { BrandType } from \\\"../../types/brand\\\";\\nimport Snackbar from \\\"../Snackbar\\\";\\n\\nconst useStyles = makeStyles((theme) => ({\\n    root: {\\n        background: theme.palette.background.default,\\n        boxShadow: theme.shadows[8],\\n        padding: \\\"30px\\\",\\n    },\\n    darkBg: {\\n        background: \\\"rgba(0, 0, 0, 0.6)\\\",\\n        boxShadow: theme.shadows[8],\\n        padding: \\\"30px\\\",\\n    },\\n}));\\n\\ntype SnackbarStoryProps = {\\n    mode: string\\n    brand: BrandType\\n    hasIcon: boolean\\n    hasBtn: boolean\\n    type: \\\"success\\\" | \\\"error\\\"\\n    labelClose: string\\n    message: string\\n}\\n\\nconst SnackbarStory = ({\\n    mode, brand, hasIcon, hasBtn, type, labelClose, message\\n}: SnackbarStoryProps) => {\\n    const classes = useStyles(themes[brand]);\\n    const [handleSuccess, setHandleSuccess] = useState(false);\\n\\n    return (\\n        <MuiThemeProvider theme={themes[brand]}>\\n            <Paper className={classes[mode]} id=\\\"Snackbar\\\">\\n                <Typography variant=\\\"h3\\\">Snackbar</Typography>\\n                <br />\\n                <Divider />\\n                <br />\\n                <Grid item xs={3}>\\n                    <Button\\n                        color=\\\"primary\\\"\\n                        label=\\\"Show\\\"\\n                        size=\\\"medium\\\"\\n                        variant=\\\"contained\\\"\\n                        onClick={() => setHandleSuccess(!handleSuccess)}\\n                    />\\n                </Grid>\\n                <Grid item xs={2}>\\n                    <Snackbar\\n                        message={message}\\n                        isOpen={handleSuccess}\\n                        hasBtn={hasBtn}\\n                        type={type}\\n                        hasIcon={hasIcon}\\n                        labelClose={labelClose}\\n                        close={() => setHandleSuccess(!handleSuccess)}\\n                    />\\n                </Grid>\\n            </Paper>\\n        </MuiThemeProvider>\\n\\n    );\\n};\\n\\nconst argsControls = {\\n    args: {\\n        brand: \\\"CVC\\\",\\n        mode: \\\"root\\\",\\n        hasIcon: true,\\n        hasBtn: true,\\n        type: \\\"success\\\",\\n        labelClose: \\\"Fechar\\\",\\n        message: \\\"Greyhound divisively hello\\\"\\n\\n    },\\n    argTypes: {\\n        brand: {\\n            type: \\\"select\\\",\\n            options: [\\\"BlackAndWhite\\\", \\\"BlackFriday\\\", \\\"CVC\\\", \\\"CVCCorp\\\", \\\"CVCYellow\\\", \\\"Sub\\\"]\\n        },\\n        mode: {\\n            type: \\\"select\\\",\\n            options: [\\\"root\\\", \\\"darkBg\\\"]\\n        },\\n        hasIcon: { type: \\\"boolean\\\" },\\n        hasBtn: { type: \\\"boolean\\\", },\\n        type: {\\n            control: { type: \\\"radio\\\" },\\n            options: [\\\"success\\\", \\\"error\\\"]\\n        },\\n        labelClose: { type: \\\"string\\\" },\\n        message: { type: \\\"string\\\" },\\n    }\\n}\\n\\nstoriesOf(\\\"Components/Snackbar\\\", module)\\n    .add(\\\"Default\\\", (args) => <SnackbarStory {...args}/>, argsControls);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"default\":{\"startLoc\":{\"col\":9,\"line\":106},\"endLoc\":{\"col\":70,\"line\":106},\"startBody\":{\"col\":20,\"line\":106},\"endBody\":{\"col\":56,\"line\":106}}};\n    \nimport React, { useState } from \"react\";\nimport { Paper, Divider, } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles , MuiThemeProvider } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { storiesOf } from \"@storybook/react\";\nimport Button from \"../../Button\";\nimport themes from \"../../Theme/themes\";\nimport { BrandType } from \"../../types/brand\";\nimport Snackbar from \"../Snackbar\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        background: theme.palette.background.default,\n        boxShadow: theme.shadows[8],\n        padding: \"30px\",\n    },\n    darkBg: {\n        background: \"rgba(0, 0, 0, 0.6)\",\n        boxShadow: theme.shadows[8],\n        padding: \"30px\",\n    },\n}));\n\ntype SnackbarStoryProps = {\n    mode: string\n    brand: BrandType\n    hasIcon: boolean\n    hasBtn: boolean\n    type: \"success\" | \"error\"\n    labelClose: string\n    message: string\n}\n\nconst SnackbarStory = ({\n    mode, brand, hasIcon, hasBtn, type, labelClose, message\n}: SnackbarStoryProps) => {\n    const classes = useStyles(themes[brand]);\n    const [handleSuccess, setHandleSuccess] = useState(false);\n\n    return (\n        <MuiThemeProvider theme={themes[brand]}>\n            <Paper className={classes[mode]} id=\"Snackbar\">\n                <Typography variant=\"h3\">Snackbar</Typography>\n                <br />\n                <Divider />\n                <br />\n                <Grid item xs={3}>\n                    <Button\n                        color=\"primary\"\n                        label=\"Show\"\n                        size=\"medium\"\n                        variant=\"contained\"\n                        onClick={() => setHandleSuccess(!handleSuccess)}\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <Snackbar\n                        message={message}\n                        isOpen={handleSuccess}\n                        hasBtn={hasBtn}\n                        type={type}\n                        hasIcon={hasIcon}\n                        labelClose={labelClose}\n                        close={() => setHandleSuccess(!handleSuccess)}\n                    />\n                </Grid>\n            </Paper>\n        </MuiThemeProvider>\n\n    );\n};\n\nconst argsControls = {\n    args: {\n        brand: \"CVC\",\n        mode: \"root\",\n        hasIcon: true,\n        hasBtn: true,\n        type: \"success\",\n        labelClose: \"Fechar\",\n        message: \"Greyhound divisively hello\"\n\n    },\n    argTypes: {\n        brand: {\n            type: \"select\",\n            options: [\"BlackAndWhite\", \"BlackFriday\", \"CVC\", \"CVCCorp\", \"CVCYellow\", \"Sub\"]\n        },\n        mode: {\n            type: \"select\",\n            options: [\"root\", \"darkBg\"]\n        },\n        hasIcon: { type: \"boolean\" },\n        hasBtn: { type: \"boolean\", },\n        type: {\n            control: { type: \"radio\" },\n            options: [\"success\", \"error\"]\n        },\n        labelClose: { type: \"string\" },\n        message: { type: \"string\" },\n    }\n}\n\nstoriesOf(\"Components/Snackbar\", module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n    .add(\"Default\", (args) => <SnackbarStory {...args}/>, argsControls);\n"]},"metadata":{},"sourceType":"module"}