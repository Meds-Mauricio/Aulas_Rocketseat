{"ast":null,"code":"export var IProviders;\n\n(function (IProviders) {\n  IProviders[\"COGNITO\"] = \"cognito\";\n  IProviders[\"LEGACY\"] = \"legacy\";\n  IProviders[\"FACEBOOK\"] = \"facebook\";\n  IProviders[\"APPLE\"] = \"apple\";\n  IProviders[\"GOOGLE\"] = \"google\";\n  IProviders[\"CORP\"] = \"corp\";\n})(IProviders || (IProviders = {}));\n\nexport function usersInProvider(usersExists) {\n  var amICorp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (!amICorp) {\n    var corpUser = updateUserNextStep(usersExists, [IProviders.CORP], \"ProfileCorp\");\n\n    if (corpUser) {\n      return corpUser;\n    }\n  }\n\n  var user = updateUserNextStep(usersExists, [IProviders.COGNITO, IProviders.LEGACY], \"Password\");\n\n  if (!user) {\n    user = updateUserNextStep(usersExists, [IProviders.FACEBOOK, IProviders.GOOGLE, IProviders.APPLE], \"SocialLoginAccount\");\n  } else {\n    user.nextStep = user.emailConfirmed ? user.nextStep : \"UnverifiedAccount\";\n  }\n\n  return user;\n}\n\nfunction updateUserNextStep(usersExists, providerArray, nextStep) {\n  var user = filterUserByProviders(usersExists, providerArray);\n\n  if (user) {\n    user.nextStep = nextStep;\n    return user;\n  }\n}\n\nfunction filterUserByProviders(users, providers) {\n  var usersFilter = users.filter(function (user) {\n    return providers.find(function (el) {\n      return el == user.provider;\n    });\n  }).sort(function (a, b) {\n    return providers.indexOf(a.provider) > providers.indexOf(b.provider) ? 1 : -1;\n  });\n  return usersFilter[0];\n}","map":{"version":3,"sources":["C:/Users/felip/OneDrive/Dokumente/cvc/core-master/src/MyTravelLogin/UserAccessSteps/MainScreen/utils/index.ts"],"names":["IProviders","usersInProvider","usersExists","amICorp","corpUser","updateUserNextStep","CORP","user","COGNITO","LEGACY","FACEBOOK","GOOGLE","APPLE","nextStep","emailConfirmed","providerArray","filterUserByProviders","users","providers","usersFilter","filter","find","el","provider","sort","a","b","indexOf"],"mappings":"AAAA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAeZ,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAA+F;AAAA,MAA1CC,OAA0C,uEAAhC,KAAgC;;AAClG,MAAI,CAACA,OAAL,EAAc;AACV,QAAMC,QAAQ,GAAGC,kBAAkB,CAACH,WAAD,EAAc,CAACF,UAAU,CAACM,IAAZ,CAAd,EAAiC,aAAjC,CAAnC;;AACA,QAAIF,QAAJ,EAAc;AACV,aAAOA,QAAP;AACH;AACJ;;AAED,MAAIG,IAAI,GAAGF,kBAAkB,CAACH,WAAD,EAAc,CAACF,UAAU,CAACQ,OAAZ,EAAqBR,UAAU,CAACS,MAAhC,CAAd,EAAuD,UAAvD,CAA7B;;AACA,MAAI,CAACF,IAAL,EAAW;AACPA,IAAAA,IAAI,GAAGF,kBAAkB,CAACH,WAAD,EAAc,CAACF,UAAU,CAACU,QAAZ,EAAsBV,UAAU,CAACW,MAAjC,EAAyCX,UAAU,CAACY,KAApD,CAAd,EAA0E,oBAA1E,CAAzB;AACH,GAFD,MAEO;AACHL,IAAAA,IAAI,CAACM,QAAL,GAAgBN,IAAI,CAACO,cAAL,GAAsBP,IAAI,CAACM,QAA3B,GAAsC,mBAAtD;AACH;;AACD,SAAON,IAAP;AACH;;AAED,SAASF,kBAAT,CAA4BH,WAA5B,EAAwDa,aAAxD,EAAqFF,QAArF,EAAgI;AAC5H,MAAMN,IAAI,GAAGS,qBAAqB,CAACd,WAAD,EAAca,aAAd,CAAlC;;AACA,MAAIR,IAAJ,EAAU;AACNA,IAAAA,IAAI,CAACM,QAAL,GAAgBA,QAAhB;AACA,WAAON,IAAP;AACH;AACJ;;AAED,SAASS,qBAAT,CAA+BC,KAA/B,EAAqDC,SAArD,EAA2F;AACvF,MAAMC,WAAW,GAAGF,KAAK,CACpBG,MADe,CACR,UAACb,IAAD,EAAuB;AAC3B,WAAOW,SAAS,CAACG,IAAV,CAAe,UAAAC,EAAE;AAAA,aAAIA,EAAE,IAAIf,IAAI,CAACgB,QAAf;AAAA,KAAjB,CAAP;AACH,GAHe,EAIfC,IAJe,CAIV,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAWR,SAAS,CAACS,OAAV,CAAkBF,CAAC,CAACF,QAApB,IAAgCL,SAAS,CAACS,OAAV,CAAkBD,CAAC,CAACH,QAApB,CAAhC,GAAgE,CAAhE,GAAoE,CAAC,CAAhF;AAAA,GAJU,CAApB;AAKA,SAAOJ,WAAW,CAAC,CAAD,CAAlB;AACH","sourcesContent":["export enum IProviders {\n    COGNITO = \"cognito\",\n    LEGACY = \"legacy\",\n    FACEBOOK = \"facebook\",\n    APPLE = \"apple\",\n    GOOGLE = \"google\",\n    CORP = \"corp\"\n}\nexport interface IUserExists {\n    emailConfirmed: boolean;\n    isSocial: boolean;\n    provider: IProviders;\n    nextStep?: string;\n}\n\nexport function usersInProvider(usersExists: IUserExists[], amICorp = false): IUserExists | undefined {\n    if (!amICorp) {\n        const corpUser = updateUserNextStep(usersExists, [IProviders.CORP], \"ProfileCorp\");\n        if (corpUser) {\n            return corpUser;\n        }\n    }\n\n    let user = updateUserNextStep(usersExists, [IProviders.COGNITO, IProviders.LEGACY], \"Password\");\n    if (!user) {\n        user = updateUserNextStep(usersExists, [IProviders.FACEBOOK, IProviders.GOOGLE, IProviders.APPLE], \"SocialLoginAccount\");\n    } else {\n        user.nextStep = user.emailConfirmed ? user.nextStep : \"UnverifiedAccount\";\n    }\n    return user;\n}\n\nfunction updateUserNextStep(usersExists: IUserExists[], providerArray: IProviders[], nextStep: string): IUserExists | undefined {\n    const user = filterUserByProviders(usersExists, providerArray);\n    if (user) {\n        user.nextStep = nextStep;\n        return user;\n    }\n}\n\nfunction filterUserByProviders(users: IUserExists[], providers: IProviders[]): IUserExists {\n    const usersFilter = users\n        .filter((user: IUserExists) => {\n            return providers.find(el => el == user.provider);\n        })\n        .sort((a, b) => (providers.indexOf(a.provider) > providers.indexOf(b.provider) ? 1 : -1));\n    return usersFilter[0];\n}\n"]},"metadata":{},"sourceType":"module"}