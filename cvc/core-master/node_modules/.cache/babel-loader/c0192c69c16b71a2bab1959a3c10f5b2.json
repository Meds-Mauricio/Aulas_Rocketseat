{"ast":null,"code":"import _slicedToArray from \"C:/Users/felip/OneDrive/Dokumente/cvc/core-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\felip\\\\OneDrive\\\\Dokumente\\\\cvc\\\\core-master\\\\src\\\\LinearLoader\\\\LinearLoader.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar styles = function styles(theme) {\n  return {\n    root: {}\n  };\n};\n\nvar LinearLoader = function LinearLoader(_ref) {\n  _s();\n\n  var className = _ref.className;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      completed = _React$useState2[0],\n      setCompleted = _React$useState2[1];\n\n  React.useEffect(function () {\n    function progress() {\n      setCompleted(function (oldCompleted) {\n        if (oldCompleted === 100) {\n          return 0;\n        }\n\n        var diff = Math.random() * 10;\n        return Math.min(oldCompleted + diff, 100);\n      });\n    }\n\n    var timer = setInterval(progress, 500);\n    return function () {\n      clearInterval(timer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LinearProgress, {\n    color: \"secondary\",\n    variant: \"determinate\",\n    value: completed,\n    className: className\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(LinearLoader, \"7sRoG+O9sj23XcMU/nqd6D+f4ss=\");\n\n_c = LinearLoader;\nLinearLoader.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"LinearLoader\"\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(LinearLoader);\n\nvar _c;\n\n$RefreshReg$(_c, \"LinearLoader\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\LinearLoader\\\\LinearLoader.js\"] = {\n    name: \"LinearLoader\",\n    docgenInfo: LinearLoader.__docgenInfo,\n    path: \"src\\\\LinearLoader\\\\LinearLoader.js\"\n  };\n}","map":{"version":3,"sources":["C:/Users/felip/OneDrive/Dokumente/cvc/core-master/src/LinearLoader/LinearLoader.js"],"names":["React","LinearProgress","withStyles","styles","theme","root","LinearLoader","className","useState","completed","setCompleted","useEffect","progress","oldCompleted","diff","Math","random","min","timer","setInterval","clearInterval","withTheme"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,UAAT,QAA2B,0BAA3B;;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAL;AAAA,CAApB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAmB;AAAA;;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AACpC,wBAAkCP,KAAK,CAACQ,QAAN,CAAe,CAAf,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AAEAV,EAAAA,KAAK,CAACW,SAAN,CAAgB,YAAM;AAClB,aAASC,QAAT,GAAoB;AAChBF,MAAAA,YAAY,CAAC,UAAAG,YAAY,EAAI;AACzB,YAAIA,YAAY,KAAK,GAArB,EAA0B;AACtB,iBAAO,CAAP;AACH;;AACD,YAAMC,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAA7B;AACA,eAAOD,IAAI,CAACE,GAAL,CAASJ,YAAY,GAAGC,IAAxB,EAA8B,GAA9B,CAAP;AACH,OANW,CAAZ;AAOH;;AAED,QAAMI,KAAK,GAAGC,WAAW,CAACP,QAAD,EAAW,GAAX,CAAzB;AACA,WAAO,YAAM;AACTQ,MAAAA,aAAa,CAACF,KAAD,CAAb;AACH,KAFD;AAGH,GAfD,EAeG,EAfH;AAiBA,sBACI,QAAC,cAAD;AACI,IAAA,KAAK,EAAC,WADV;AAEI,IAAA,OAAO,EAAC,aAFZ;AAGI,IAAA,KAAK,EAAET,SAHX;AAII,IAAA,SAAS,EAAEF;AAJf;AAAA;AAAA;AAAA;AAAA,WADJ;AAQH,CA5BD;;GAAMD,Y;;KAAAA,Y;;;;;;AA8BN,eAAeJ,UAAU,CAACC,MAAD,EAAS;AAAEkB,EAAAA,SAAS,EAAE;AAAb,CAAT,CAAV,CAAwCf,YAAxC,CAAf","sourcesContent":["import React from \"react\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({ root: {} });\n\nconst LinearLoader = ({ className }) => {\n    const [completed, setCompleted] = React.useState(0);\n\n    React.useEffect(() => {\n        function progress() {\n            setCompleted(oldCompleted => {\n                if (oldCompleted === 100) {\n                    return 0;\n                }\n                const diff = Math.random() * 10;\n                return Math.min(oldCompleted + diff, 100);\n            });\n        }\n\n        const timer = setInterval(progress, 500);\n        return () => {\n            clearInterval(timer);\n        };\n    }, []);\n\n    return (\n        <LinearProgress\n            color=\"secondary\"\n            variant=\"determinate\"\n            value={completed}\n            className={className}\n        />\n    );\n};\n\nexport default withStyles(styles, { withTheme: true })(LinearLoader);\n"]},"metadata":{},"sourceType":"module"}