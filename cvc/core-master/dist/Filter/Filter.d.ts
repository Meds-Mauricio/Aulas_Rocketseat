declare var _default: React.ComponentType<Pick<Pick<Pick<{
    label: any;
    isOpen: any;
    isActive: any;
    sufix: any;
    prefix: any;
    onOpen: any;
    onApply: any;
    onReset: any;
    onClose: any;
    type: any;
    items: any;
    classes: any;
    className: any;
    value: any;
    disabled: any;
    noModal: any;
    more: any;
    isMobile: any;
    header: any;
    height: any;
    qtdFilters: any;
}, never> & Pick<PropTypes.InferProps<{
    classes: PropTypes.Validator<object>;
    className: PropTypes.Requireable<object>;
    label: PropTypes.Validator<string>;
    items: PropTypes.Validator<any[]>;
    isOpen: PropTypes.Requireable<boolean>;
    isActive: PropTypes.Requireable<boolean>;
    type: PropTypes.Requireable<string>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onApply: PropTypes.Requireable<(...args: any[]) => any>;
    onReset: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    value: PropTypes.Requireable<any[]>;
    noModal: PropTypes.Requireable<boolean>;
    prefix: PropTypes.Requireable<string>;
    sufix: PropTypes.Requireable<string>;
}>, "className" | "type" | "prefix" | "onReset" | "onClose" | "value" | "sufix" | "noModal" | "onOpen" | "onApply" | "isOpen" | "isActive" | PropTypes.RequiredKeys<{
    classes: PropTypes.Validator<object>;
    className: PropTypes.Requireable<object>;
    label: PropTypes.Validator<string>;
    items: PropTypes.Validator<any[]>;
    isOpen: PropTypes.Requireable<boolean>;
    isActive: PropTypes.Requireable<boolean>;
    type: PropTypes.Requireable<string>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onApply: PropTypes.Requireable<(...args: any[]) => any>;
    onReset: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    value: PropTypes.Requireable<any[]>;
    noModal: PropTypes.Requireable<boolean>;
    prefix: PropTypes.Requireable<string>;
    sufix: PropTypes.Requireable<string>;
}>> & Pick<{
    label: any;
    isOpen: any;
    isActive: any;
    sufix: any;
    prefix: any;
    onOpen: any;
    onApply: any;
    onReset: any;
    onClose: any;
    type: any;
    items: any;
    classes: any;
    className: any;
    value: any;
    disabled: any;
    noModal: any;
    more: any;
    isMobile: any;
    header: any;
    height: any;
    qtdFilters: any;
}, "height" | "disabled" | "header" | "isMobile" | "more" | "qtdFilters">, "className" | "disabled" | "header" | "isMobile" | "onReset" | "onClose" | "value" | "noModal" | "onOpen" | "onApply" | "isActive" | "more" | "qtdFilters" | PropTypes.RequiredKeys<{
    classes: PropTypes.Validator<object>;
    className: PropTypes.Requireable<object>;
    label: PropTypes.Validator<string>;
    items: PropTypes.Validator<any[]>;
    isOpen: PropTypes.Requireable<boolean>;
    isActive: PropTypes.Requireable<boolean>;
    type: PropTypes.Requireable<string>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onApply: PropTypes.Requireable<(...args: any[]) => any>;
    onReset: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    value: PropTypes.Requireable<any[]>;
    noModal: PropTypes.Requireable<boolean>;
    prefix: PropTypes.Requireable<string>;
    sufix: PropTypes.Requireable<string>;
}>> & Partial<Pick<Pick<{
    label: any;
    isOpen: any;
    isActive: any;
    sufix: any;
    prefix: any;
    onOpen: any;
    onApply: any;
    onReset: any;
    onClose: any;
    type: any;
    items: any;
    classes: any;
    className: any;
    value: any;
    disabled: any;
    noModal: any;
    more: any;
    isMobile: any;
    header: any;
    height: any;
    qtdFilters: any;
}, never> & Pick<PropTypes.InferProps<{
    classes: PropTypes.Validator<object>;
    className: PropTypes.Requireable<object>;
    label: PropTypes.Validator<string>;
    items: PropTypes.Validator<any[]>;
    isOpen: PropTypes.Requireable<boolean>;
    isActive: PropTypes.Requireable<boolean>;
    type: PropTypes.Requireable<string>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onApply: PropTypes.Requireable<(...args: any[]) => any>;
    onReset: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    value: PropTypes.Requireable<any[]>;
    noModal: PropTypes.Requireable<boolean>;
    prefix: PropTypes.Requireable<string>;
    sufix: PropTypes.Requireable<string>;
}>, "className" | "type" | "prefix" | "onReset" | "onClose" | "value" | "sufix" | "noModal" | "onOpen" | "onApply" | "isOpen" | "isActive" | PropTypes.RequiredKeys<{
    classes: PropTypes.Validator<object>;
    className: PropTypes.Requireable<object>;
    label: PropTypes.Validator<string>;
    items: PropTypes.Validator<any[]>;
    isOpen: PropTypes.Requireable<boolean>;
    isActive: PropTypes.Requireable<boolean>;
    type: PropTypes.Requireable<string>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onApply: PropTypes.Requireable<(...args: any[]) => any>;
    onReset: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    value: PropTypes.Requireable<any[]>;
    noModal: PropTypes.Requireable<boolean>;
    prefix: PropTypes.Requireable<string>;
    sufix: PropTypes.Requireable<string>;
}>> & Pick<{
    label: any;
    isOpen: any;
    isActive: any;
    sufix: any;
    prefix: any;
    onOpen: any;
    onApply: any;
    onReset: any;
    onClose: any;
    type: any;
    items: any;
    classes: any;
    className: any;
    value: any;
    disabled: any;
    noModal: any;
    more: any;
    isMobile: any;
    header: any;
    height: any;
    qtdFilters: any;
}, "height" | "disabled" | "header" | "isMobile" | "more" | "qtdFilters">, "type" | "height" | "prefix" | "sufix" | "isOpen">> & Partial<Pick<{
    type: string;
    isOpen: boolean;
    prefix: string;
    sufix: string;
    height: string;
}, never>>, "className" | "type" | "height" | "disabled" | "header" | "label" | "isMobile" | "prefix" | "onReset" | "onClose" | "value" | "items" | "sufix" | "noModal" | "onOpen" | "onApply" | "isOpen" | "isActive" | "more" | "qtdFilters"> & import("@material-ui/styles/withStyles/withStyles").StyledComponentProps<"root" | "content" | "grid" | "open" | "active" | "footer" | "header" | "title" | "container" | "noModal" | "noModalMore" | "opened" | "iconOpened" | "iconClosed" | "buttonDelete" | "noModalContainer" | "noModalContainerMobile" | "contentMore" | "contentItem" | "item" | "footerMobile" | "showFooterMobile" | "btn" | "btnReset" | "btnApply">>;
export default _default;
import PropTypes from "prop-types";
import React from "react";
