declare var _default: React.ComponentType<Pick<Pick<Pick<{
    classes: any;
    label: any;
    value: any;
    id: any;
    type: any;
    autoComplete: any;
    labelClassName: any;
    inputClassName: any;
    rootClassName: any;
    size: any;
    icon: any;
    disabled: any;
    transparent: any;
    noBorder: any;
    error: any;
    errorMsg: any;
    onClick: any;
    onChange: any;
    onFocus: any;
    onBlur: any;
    onKeyUp: any;
    mask: any;
    inputName: any;
    currencyMask: any;
    placeholder: any;
    isActive: any;
    placeholderBold: any;
    labelOnBottom: any;
    required: any;
    readonly: any;
}, never> & Pick<PropTypes.InferProps<{
    classes: PropTypes.Validator<object>;
    label: PropTypes.Requireable<string>;
    value: PropTypes.Requireable<string>;
    id: PropTypes.Requireable<string>;
    type: PropTypes.Requireable<string>;
    autoComplete: PropTypes.Requireable<string>;
    labelClassName: PropTypes.Requireable<string | object>;
    inputClassName: PropTypes.Requireable<string | object>;
    rootClassName: PropTypes.Requireable<string | object>;
    size: PropTypes.Requireable<string>;
    icon: PropTypes.Requireable<object>;
    disabled: PropTypes.Requireable<boolean>;
    labelOnBottom: PropTypes.Requireable<boolean>;
    transparent: PropTypes.Requireable<boolean>;
    noBorder: PropTypes.Requireable<boolean>;
    error: PropTypes.Requireable<boolean>;
    errorMsg: PropTypes.Requireable<string>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    onFocus: PropTypes.Requireable<(...args: any[]) => any>;
    onBlur: PropTypes.Requireable<(...args: any[]) => any>;
    placeholderBold: PropTypes.Requireable<boolean>;
    inputName: PropTypes.Requireable<string>;
    required: PropTypes.Requireable<boolean>;
    onKeyUp: PropTypes.Requireable<(...args: any[]) => any>;
}>, "classes" | "type" | "onClick" | "transparent" | "size" | "icon" | "disabled" | "label" | "error" | "id" | "onFocus" | "onBlur" | "onChange" | "onKeyUp" | "value" | "autoComplete" | "required" | "labelClassName" | "inputClassName" | "rootClassName" | "noBorder" | "errorMsg" | "inputName" | "placeholderBold" | "labelOnBottom"> & Pick<{
    classes: any;
    label: any;
    value: any;
    id: any;
    type: any;
    autoComplete: any;
    labelClassName: any;
    inputClassName: any;
    rootClassName: any;
    size: any;
    icon: any;
    disabled: any;
    transparent: any;
    noBorder: any;
    error: any;
    errorMsg: any;
    onClick: any;
    onChange: any;
    onFocus: any;
    onBlur: any;
    onKeyUp: any;
    mask: any;
    inputName: any;
    currencyMask: any;
    placeholder: any;
    isActive: any;
    placeholderBold: any;
    labelOnBottom: any;
    required: any;
    readonly: any;
}, "mask" | "placeholder" | "isActive" | "currencyMask" | "readonly">, "classes" | "onClick" | "mask" | "transparent" | "size" | "icon" | "disabled" | "label" | "error" | "id" | "placeholder" | "onFocus" | "onBlur" | "onChange" | "onKeyUp" | "value" | "autoComplete" | "required" | "isActive" | "labelClassName" | "inputClassName" | "rootClassName" | "noBorder" | "errorMsg" | "inputName" | "currencyMask" | "placeholderBold" | "labelOnBottom" | "readonly"> & Partial<Pick<Pick<{
    classes: any;
    label: any;
    value: any;
    id: any;
    type: any;
    autoComplete: any;
    labelClassName: any;
    inputClassName: any;
    rootClassName: any;
    size: any;
    icon: any;
    disabled: any;
    transparent: any;
    noBorder: any;
    error: any;
    errorMsg: any;
    onClick: any;
    onChange: any;
    onFocus: any;
    onBlur: any;
    onKeyUp: any;
    mask: any;
    inputName: any;
    currencyMask: any;
    placeholder: any;
    isActive: any;
    placeholderBold: any;
    labelOnBottom: any;
    required: any;
    readonly: any;
}, never> & Pick<PropTypes.InferProps<{
    classes: PropTypes.Validator<object>;
    label: PropTypes.Requireable<string>;
    value: PropTypes.Requireable<string>;
    id: PropTypes.Requireable<string>;
    type: PropTypes.Requireable<string>;
    autoComplete: PropTypes.Requireable<string>;
    labelClassName: PropTypes.Requireable<string | object>;
    inputClassName: PropTypes.Requireable<string | object>;
    rootClassName: PropTypes.Requireable<string | object>;
    size: PropTypes.Requireable<string>;
    icon: PropTypes.Requireable<object>;
    disabled: PropTypes.Requireable<boolean>;
    labelOnBottom: PropTypes.Requireable<boolean>;
    transparent: PropTypes.Requireable<boolean>;
    noBorder: PropTypes.Requireable<boolean>;
    error: PropTypes.Requireable<boolean>;
    errorMsg: PropTypes.Requireable<string>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    onFocus: PropTypes.Requireable<(...args: any[]) => any>;
    onBlur: PropTypes.Requireable<(...args: any[]) => any>;
    placeholderBold: PropTypes.Requireable<boolean>;
    inputName: PropTypes.Requireable<string>;
    required: PropTypes.Requireable<boolean>;
    onKeyUp: PropTypes.Requireable<(...args: any[]) => any>;
}>, "classes" | "type" | "onClick" | "transparent" | "size" | "icon" | "disabled" | "label" | "error" | "id" | "onFocus" | "onBlur" | "onChange" | "onKeyUp" | "value" | "autoComplete" | "required" | "labelClassName" | "inputClassName" | "rootClassName" | "noBorder" | "errorMsg" | "inputName" | "placeholderBold" | "labelOnBottom"> & Pick<{
    classes: any;
    label: any;
    value: any;
    id: any;
    type: any;
    autoComplete: any;
    labelClassName: any;
    inputClassName: any;
    rootClassName: any;
    size: any;
    icon: any;
    disabled: any;
    transparent: any;
    noBorder: any;
    error: any;
    errorMsg: any;
    onClick: any;
    onChange: any;
    onFocus: any;
    onBlur: any;
    onKeyUp: any;
    mask: any;
    inputName: any;
    currencyMask: any;
    placeholder: any;
    isActive: any;
    placeholderBold: any;
    labelOnBottom: any;
    required: any;
    readonly: any;
}, "mask" | "placeholder" | "isActive" | "currencyMask" | "readonly">, "type">> & Partial<Pick<{
    type: string;
}, never>>, "type" | "onClick" | "mask" | "transparent" | "size" | "icon" | "disabled" | "label" | "error" | "id" | "placeholder" | "onFocus" | "onBlur" | "onChange" | "onKeyUp" | "value" | "autoComplete" | "required" | "isActive" | "labelClassName" | "inputClassName" | "rootClassName" | "noBorder" | "errorMsg" | "inputName" | "currencyMask" | "placeholderBold" | "labelOnBottom" | "readonly"> & import("@material-ui/styles/withStyles/withStyles").StyledComponentProps<"root" | "transparent" | "large" | "small" | "icon" | "disabled" | "label" | "error" | "noBorder" | "readonly" | "inputIcon" | "inputActive" | "labelIcon" | "labelLarge" | "labelLargeIcon" | "lblActive" | "lblSemiActive" | "disabledLabel" | "errorText" | "hasError" | "iconNoBorder" | "lbtransparent" | "lbBold" | "specialOutline">>;
export default _default;
import PropTypes from "prop-types";
import React from "react";
