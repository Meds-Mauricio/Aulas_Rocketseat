declare var _default: React.ComponentType<Pick<Pick<Pick<{
    filter: any;
    classes: any;
    onApply: any;
    onReset: any;
    label: any;
    isAmenities: any;
    isLuggage: any;
    noModal: any;
    onChange: any;
    items: any;
    isMobile: any;
    open: any;
    onOpen: any;
    onClose: any;
    sufix: any;
    onActive: any;
    className: any;
    height: any;
}, never> & Pick<PropTypes.InferProps<{
    isAmenities: PropTypes.Requireable<boolean>;
    isLuggage: PropTypes.Requireable<boolean>;
    isMobile: PropTypes.Requireable<boolean>;
    noModal: PropTypes.Requireable<boolean>;
    open: PropTypes.Requireable<boolean>;
    label: PropTypes.Requireable<string>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    onApply: PropTypes.Requireable<(...args: any[]) => any>;
    onReset: PropTypes.Requireable<(...args: any[]) => any>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    onActive: PropTypes.Requireable<(...args: any[]) => any>;
    sufix: PropTypes.Requireable<string>;
    items: PropTypes.Requireable<(PropTypes.InferProps<{
        code: PropTypes.Requireable<number>;
        label: PropTypes.Requireable<string>;
        icon: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        size: PropTypes.Requireable<string>;
        checked: PropTypes.Requireable<boolean>;
    }> | null | undefined)[]>;
}>, "open" | "label" | "isMobile" | "onChange" | "onReset" | "onClose" | "items" | "sufix" | "noModal" | "onOpen" | "onApply" | "onActive" | "isAmenities" | "isLuggage"> & Pick<{
    filter: any;
    classes: any;
    onApply: any;
    onReset: any;
    label: any;
    isAmenities: any;
    isLuggage: any;
    noModal: any;
    onChange: any;
    items: any;
    isMobile: any;
    open: any;
    onOpen: any;
    onClose: any;
    sufix: any;
    onActive: any;
    className: any;
    height: any;
}, "classes" | "className" | "filter" | "height">, "classes" | "className" | "filter" | "height"> & Partial<Pick<Pick<{
    filter: any;
    classes: any;
    onApply: any;
    onReset: any;
    label: any;
    isAmenities: any;
    isLuggage: any;
    noModal: any;
    onChange: any;
    items: any;
    isMobile: any;
    open: any;
    onOpen: any;
    onClose: any;
    sufix: any;
    onActive: any;
    className: any;
    height: any;
}, never> & Pick<PropTypes.InferProps<{
    isAmenities: PropTypes.Requireable<boolean>;
    isLuggage: PropTypes.Requireable<boolean>;
    isMobile: PropTypes.Requireable<boolean>;
    noModal: PropTypes.Requireable<boolean>;
    open: PropTypes.Requireable<boolean>;
    label: PropTypes.Requireable<string>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    onApply: PropTypes.Requireable<(...args: any[]) => any>;
    onReset: PropTypes.Requireable<(...args: any[]) => any>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    onActive: PropTypes.Requireable<(...args: any[]) => any>;
    sufix: PropTypes.Requireable<string>;
    items: PropTypes.Requireable<(PropTypes.InferProps<{
        code: PropTypes.Requireable<number>;
        label: PropTypes.Requireable<string>;
        icon: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        size: PropTypes.Requireable<string>;
        checked: PropTypes.Requireable<boolean>;
    }> | null | undefined)[]>;
}>, "open" | "label" | "isMobile" | "onChange" | "onReset" | "onClose" | "items" | "sufix" | "noModal" | "onOpen" | "onApply" | "onActive" | "isAmenities" | "isLuggage"> & Pick<{
    filter: any;
    classes: any;
    onApply: any;
    onReset: any;
    label: any;
    isAmenities: any;
    isLuggage: any;
    noModal: any;
    onChange: any;
    items: any;
    isMobile: any;
    open: any;
    onOpen: any;
    onClose: any;
    sufix: any;
    onActive: any;
    className: any;
    height: any;
}, "classes" | "className" | "filter" | "height">, "open" | "label" | "isMobile" | "onChange" | "onReset" | "onClose" | "items" | "sufix" | "noModal" | "onOpen" | "onApply" | "onActive" | "isAmenities" | "isLuggage">> & Partial<Pick<{
    isAmenities: boolean;
    isLuggage: boolean;
    open: boolean;
    isMobile: boolean;
    sufix: string;
    label: string;
    noModal: boolean;
    items: never[];
    onOpen: () => void;
    onClose: () => void;
    onApply: () => void;
    onReset: () => void;
    onChange: () => void;
    onActive: () => void;
}, never>>, "className" | "filter" | "height" | "open" | "label" | "isMobile" | "onChange" | "onReset" | "onClose" | "items" | "sufix" | "noModal" | "onOpen" | "onApply" | "onActive" | "isAmenities" | "isLuggage"> & import("@material-ui/core/styles").StyledComponentProps<"amenitiesText" | "chip">>;
export default _default;
import PropTypes from "prop-types";
import React from "react";
