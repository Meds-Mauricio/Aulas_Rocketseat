{"version":3,"sources":["../../../../../src/MyTravelLogin/shared/components/Input/index.tsx"],"names":["Input","name","type","maxLength","placeholderText","showTip","infoMessage","hasMask","mask","disabledInput","shrink","rest","fieldName","registerField","error","defaultValue","classes","inputRef","errorMessageRef","infoMessageRef","showInfoMessage","setShowInfoMessage","inputType","setInputType","shrinkInput","setShrinkInput","ref","current","path","handleVisibility","handleShowInfoMessage","value","split","length","handleHideInfoMessage","input","style","color","root","outlinedInput","adornedEnd","focused","isFocused","notchedOutline","endAdornment","inputVisibilityIcon"],"mappings":"obACA,qDACA,wFACA,uGACA,iGACA,kCACA,wEACA,+EACA,wD,knCAeA,GAAMA,CAAAA,KAA2B,CAAG,QAA9BA,CAAAA,KAA8B,MAY9B,IAXFC,CAAAA,IAWE,MAXFA,IAWE,CAVFC,IAUE,MAVFA,IAUE,CATFC,SASE,MATFA,SASE,CARFC,eAQE,MARFA,eAQE,CAPFC,OAOE,MAPFA,OAOE,CANFC,WAME,MANFA,WAME,CALFC,OAKE,MALFA,OAKE,CAJFC,IAIE,MAJFA,IAIE,CAHFC,aAGE,MAHFA,aAGE,CAFFC,MAEE,MAFFA,MAEE,CADCC,IACD,0DACF,cAA0D,mBAASV,IAAT,CAA1D,CAAQW,SAAR,WAAQA,SAAR,CAAmBC,aAAnB,WAAmBA,aAAnB,CAAkCC,KAAlC,WAAkCA,KAAlC,CAAyCC,YAAzC,WAAyCA,YAAzC,CACA,GAAMC,CAAAA,OAAO,CAAG,uBAAU,CAAEF,KAAK,CAALA,KAAF,CAAV,CAAhB,CACA,GAAMG,CAAAA,QAAQ,CAAG,kBAAY,IAAZ,CAAjB,CACA,GAAMC,CAAAA,eAAe,CAAG,kBAAyB,IAAzB,CAAxB,CACA,GAAMC,CAAAA,cAAc,CAAG,kBAAyB,IAAzB,CAAvB,CACA,cAA8C,oBAAS,KAAT,CAA9C,wDAAOC,eAAP,eAAwBC,kBAAxB,eACA,eAAkC,oBAASnB,IAAT,CAAlC,yDAAOoB,SAAP,eAAkBC,YAAlB,eACA,eAAsC,oBAASb,MAAT,CAAtC,yDAAOc,WAAP,eAAoBC,cAApB,eAEA,qBAAU,UAAM,CACZZ,aAAa,CAAC,CACVZ,IAAI,CAAEW,SADI,CAEVc,GAAG,CAAET,QAAQ,CAACU,OAFJ,CAGVC,IAAI,CAAE,OAHI,CAAD,CAKhB,CAND,CAMG,CAAChB,SAAD,CAAYC,aAAZ,CANH,EAQA,GAAMgB,CAAAA,gBAAgB,CAAG,uBAAY,SAACH,GAAD,CAAS,CAC1C,GAAIA,GAAG,CAACC,OAAJ,CAAYzB,IAAZ,GAAqB,UAAzB,CAAqC,CACjCwB,GAAG,CAACC,OAAJ,CAAYzB,IAAZ,CAAmB,MAAnB,CACAqB,YAAY,CAAC,cAAD,CACf,CAHD,IAGO,CACHG,GAAG,CAACC,OAAJ,CAAYzB,IAAZ,CAAmB,UAAnB,CACAqB,YAAY,CAAC,UAAD,CACf,CACJ,CARwB,CAQtB,EARsB,CAAzB,CAUA,GAAMO,CAAAA,qBAAqB,CAAG,uBAAY,UAAM,CAC5CL,cAAc,CAAC,IAAD,CAAd,CACA,GAAIP,eAAe,EAAIA,eAAe,CAACS,OAAvC,CAAgD,CAC5CT,eAAe,CAACS,OAAhB,CAAwBI,KAAxB,CAAgC,EACnC,CACD,GAAIjB,KAAK,EAAIA,KAAK,CAACkB,KAAN,CAAY,EAAZ,EAAgBC,MAAhB,CAAyB,CAAtC,CAAyC,CACrCZ,kBAAkB,CAAC,KAAD,CACrB,CAFD,IAEO,CACHA,kBAAkB,CAAChB,OAAO,GAAK,IAAb,CACrB,CACJ,CAV6B,CAU3B,EAV2B,CAA9B,CAYA,GAAM6B,CAAAA,qBAAqB,CAAG,uBAAY,UAAM,CAC5Cb,kBAAkB,CAAC,KAAD,CACrB,CAF6B,CAE3B,EAF2B,CAA9B,CAIA,GAAGd,OAAH,CAAW,CACP,mBAAO,6EACH,gCAAC,0BAAD,EACI,GAAG,CAAEU,QADT,CAEI,YAAY,CAAEF,YAFlB,CAGI,KAAK,CAAEA,YAHX,CAII,QAAQ,CAAEN,aAJd,CAKI,IAAI,CAAED,IAAI,EAAI,EALlB,CAMI,QAAQ,CAAE0B,qBANd,CAOI,OAAO,CAAEJ,qBAPb,EASK,8BAAO,gCAAC,qBAAD,EACJ,IAAI,CAAE7B,IADF,CAEJ,SAAS,CAAEe,OAAO,CAACmB,KAFf,CAGJ,QAAQ,CAAElB,QAHN,CAIJ,MAAM,CAAC,OAJH,CAKJ,YAAY,CAAEF,YALV,CAMJ,KAAK,CAAEX,eANH,CAOJ,OAAO,CAAC,UAPJ,CAQJ,IAAI,CAAEkB,SARF,CASJ,QAAQ,CAAEb,aATN,CAUJ,OAAO,CAAE,yBAAMgB,CAAAA,cAAc,CAAC,IAAD,CAApB,CAVL,CAWJ,KAAK,CAAEV,YAXH,CAYJ,eAAe,CAAE,CACbqB,KAAK,CAAEtB,KAAK,CAAG,CAAEuB,KAAK,CAAE,SAAT,CAAH,CAA0B,CAAEA,KAAK,CAAE,EAAT,CADzB,CAEb3B,MAAM,CAAEc,WAFK,CAZb,CAgBJ,UAAU,CAAE,CACRR,OAAO,CAAE,CACLsB,IAAI,CAAEtB,OAAO,CAACuB,aADT,CAELC,UAAU,CAAExB,OAAO,CAACwB,UAFf,CAGLC,OAAO,CAAEzB,OAAO,CAAC0B,SAHZ,CAILC,cAAc,CAAE7B,KAAK,CAAGE,OAAO,CAAC2B,cAAX,CAA4B,EAJ5C,CADD,CAhBR,EAAP,CATL,CADG,CAqCF7B,KAAK,eACF,gCAAC,6BAAD,EAAmB,GAAG,CAAEI,eAAxB,CAAyC,OAAO,KAAhD,CAAiD,OAAO,CAAEJ,KAA1D,EAtCD,CAwCF,CAACA,KAAD,EAAUZ,IAAI,GAAK,UAAnB,EAAiCkB,eAAjC,eACG,gCAAC,6BAAD,EAAmB,GAAG,CAAED,cAAxB,CAAwC,MAAM,KAA9C,CAA+C,OAAO,CAAEb,WAAW,EAAI,EAAvE,EAzCD,CA2CF,CAACQ,KAAD,EAAUb,IAAI,GAAK,KAAnB,EAA4BmB,eAA5B,eACG,gCAAC,6BAAD,EAAmB,GAAG,CAAED,cAAxB,CAAwC,MAAM,KAA9C,CAA+C,OAAO,CAAEb,WAAW,EAAI,EAAvE,EA5CD,CA+CV,CAED,mBACI,6EACI,gCAAC,qBAAD,EACI,IAAI,CAAEL,IADV,CAEI,SAAS,CAAEe,OAAO,CAACmB,KAFvB,CAGI,QAAQ,CAAElB,QAHd,CAII,MAAM,CAAC,OAJX,CAKI,KAAK,CAAEb,eALX,CAMI,OAAO,CAAC,UANZ,CAOI,IAAI,CAAEkB,SAPV,CAQI,QAAQ,CAAEY,qBARd,CASI,OAAO,CAAEJ,qBATb,CAUI,OAAO,CAAE,yBAAML,CAAAA,cAAc,CAAC,IAAD,CAApB,CAVb,CAWI,UAAU,CAAE,CACRtB,SAAS,CAATA,SADQ,CAXhB,CAcI,eAAe,CAAE,CACbiC,KAAK,CAAEtB,KAAK,CAAG,CAAEuB,KAAK,CAAE,SAAT,CAAH,CAA0B,CAAEA,KAAK,CAAE,EAAT,CADzB,CAEb3B,MAAM,CAAEc,WAFK,CAdrB,CAkBI,UAAU,CAAE,CACRoB,YAAY,cAAE,gEACRtB,SAAS,GAAK,UAAd,EAA4BjB,OAAO,GAAK,IAAzC,eACG,gCAAC,iCAAD,EAAuB,OAAO,CAAE,yBAAMwB,CAAAA,gBAAgB,CAACZ,QAAD,CAAtB,CAAhC,CACI,SAAS,CAAED,OAAO,CAAC6B,mBADvB,EAFM,CAMTvB,SAAS,GAAK,cAAd,eACG,gCAAC,8BAAD,EAAoB,OAAO,CAAE,yBAAMO,CAAAA,gBAAgB,CAACZ,QAAD,CAAtB,CAA7B,CACI,SAAS,CAAED,OAAO,CAAC6B,mBADvB,EAPM,CADN,CAaR7B,OAAO,CAAE,CACLsB,IAAI,CAAEtB,OAAO,CAACuB,aADT,CAELC,UAAU,CAAExB,OAAO,CAACwB,UAFf,CAGLC,OAAO,CAAEzB,OAAO,CAAC0B,SAHZ,CAILC,cAAc,CAAE7B,KAAK,CAAGE,OAAO,CAAC2B,cAAX,CAA4B,EAJ5C,CAbD,CAlBhB,EADJ,CAyCK7B,KAAK,eACF,gCAAC,6BAAD,EAAmB,GAAG,CAAEI,eAAxB,CAAyC,OAAO,KAAhD,CAAiD,OAAO,CAAEJ,KAA1D,EA1CR,CA4CK,CAACA,KAAD,EAAUZ,IAAI,GAAK,UAAnB,EAAiCkB,eAAjC,eACG,gCAAC,6BAAD,EAAmB,GAAG,CAAED,cAAxB,CAAwC,MAAM,KAA9C,CAA+C,OAAO,CAAEb,WAAW,EAAI,EAAvE,EA7CR,CAgDK,CAACQ,KAAD,EAAUb,IAAI,GAAK,KAAnB,EAA4BmB,eAA5B,eACG,gCAAC,6BAAD,EAAmB,GAAG,CAAED,cAAxB,CAAwC,MAAM,KAA9C,CAA+C,OAAO,CAAEb,WAAW,EAAI,EAAvE,EAjDR,CAqDP,CAhKD,C,aAkKeN,K","sourcesContent":["/* eslint-disable react/jsx-no-duplicate-props */\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport VisibilityOffOutlined from \"@material-ui/icons/VisibilityOffOutlined\";\nimport VisibilityOutlined from \"@material-ui/icons/VisibilityOutlined\";\nimport { useField } from \"@unform/core\";\nimport ReactInputMask, { Props as InputMaskProps } from \"react-input-mask\";\nimport MessageValidation from \"../MessageValidation\";\nimport useStyles from \"./styles\";\n\ninterface InputProps extends Omit<InputMaskProps, \"mask\"> {\n    name: string;\n    placeholderText: React.ReactElement | null | string;\n    type?: \"number\" | \"email\" | \"text\" | \"password\" | \"hidePassword\";\n    maxLength?: number;\n    showTip?: boolean;\n    infoMessage?: string;\n    hasMask?: boolean;\n    mask?: string | (string | RegExp)[]\n    disabledInput?: boolean\n    shrink?: boolean\n}\n\nconst Input: React.FC<InputProps> = ({\n    name,\n    type,\n    maxLength,\n    placeholderText,\n    showTip,\n    infoMessage,\n    hasMask,\n    mask,\n    disabledInput,\n    shrink,\n    ...rest\n}) => {\n    const { fieldName, registerField, error, defaultValue } = useField(name);\n    const classes = useStyles({ error });\n    const inputRef = useRef<any>(null);\n    const errorMessageRef = useRef<HTMLInputElement>(null);\n    const infoMessageRef = useRef<HTMLInputElement>(null);\n    const [showInfoMessage, setShowInfoMessage] = useState(false);\n    const [inputType, setInputType] = useState(type);\n    const [shrinkInput, setShrinkInput] = useState(shrink)\n\n    useEffect(() => {\n        registerField({\n            name: fieldName,\n            ref: inputRef.current,\n            path: \"value\",\n        });\n    }, [fieldName, registerField]);\n\n    const handleVisibility = useCallback((ref) => {\n        if (ref.current.type === \"password\") {\n            ref.current.type = \"text\";\n            setInputType(\"hidePassword\");\n        } else {\n            ref.current.type = \"password\";\n            setInputType(\"password\");\n        }\n    }, []);\n\n    const handleShowInfoMessage = useCallback(() => {\n        setShrinkInput(true)\n        if (errorMessageRef && errorMessageRef.current) {\n            errorMessageRef.current.value = \"\";\n        }\n        if (error && error.split(\"\").length > 0) {\n            setShowInfoMessage(false);\n        } else {\n            setShowInfoMessage(showTip === true);\n        }\n    }, []);\n\n    const handleHideInfoMessage = useCallback(() => {\n        setShowInfoMessage(false);\n    }, []);\n\n    if(hasMask){\n        return <>\n            <ReactInputMask\n                ref={inputRef}\n                defaultValue={defaultValue}\n                value={defaultValue}\n                disabled={disabledInput}\n                mask={mask || \"\"}\n                onChange={handleHideInfoMessage}\n                onFocus={handleShowInfoMessage}\n            >\n                {() =>  <TextField\n                    name={name}\n                    className={classes.input}\n                    inputRef={inputRef}\n                    margin=\"dense\"\n                    defaultValue={defaultValue}\n                    label={placeholderText}\n                    variant=\"outlined\"\n                    type={inputType}\n                    disabled={disabledInput}\n                    onClick={() => setShrinkInput(true)}\n                    value={defaultValue}\n                    InputLabelProps={{\n                        style: error ? { color: \"#FF3344\" } : { color: \"\" },\n                        shrink: shrinkInput,\n                    }}\n                    InputProps={{\n                        classes: {\n                            root: classes.outlinedInput,\n                            adornedEnd: classes.adornedEnd,\n                            focused: classes.isFocused,\n                            notchedOutline: error ? classes.notchedOutline : \"\"\n                        },\n                    }}\n                />\n                }\n            </ReactInputMask>\n            {error && (\n                <MessageValidation ref={errorMessageRef} isError message={error} />\n            )}\n            {!error && type === \"password\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n            {!error && name === \"cpf\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n        </>\n    }\n\n    return (\n        <>\n            <TextField\n                name={name}\n                className={classes.input}\n                inputRef={inputRef}\n                margin=\"dense\"\n                label={placeholderText}\n                variant=\"outlined\"\n                type={inputType}\n                onChange={handleHideInfoMessage}\n                onFocus={handleShowInfoMessage}\n                onClick={() => setShrinkInput(true)}\n                inputProps={{\n                    maxLength\n                }}\n                InputLabelProps={{\n                    style: error ? { color: \"#FF3344\" } : { color: \"\" },\n                    shrink: shrinkInput,\n                }}\n                InputProps={{\n                    endAdornment: <>\n                        {(inputType === \"password\" && showTip === true) &&\n                            <VisibilityOffOutlined onClick={() => handleVisibility(inputRef)}\n                                className={classes.inputVisibilityIcon}\n                            />\n                        }\n                        {inputType === \"hidePassword\" &&\n                            <VisibilityOutlined onClick={() => handleVisibility(inputRef)}\n                                className={classes.inputVisibilityIcon}\n                            />\n                        }\n                    </>,\n                    classes: {\n                        root: classes.outlinedInput,\n                        adornedEnd: classes.adornedEnd,\n                        focused: classes.isFocused,\n                        notchedOutline: error ? classes.notchedOutline : \"\"\n                    },\n                }}\n            />\n\n            {error && (\n                <MessageValidation ref={errorMessageRef} isError message={error} />\n            )}\n            {!error && type === \"password\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n\n            {!error && name === \"cpf\" && showInfoMessage && (\n                <MessageValidation ref={infoMessageRef} isInfo message={infoMessage || \"\"} />\n            )}\n        </>\n    );\n};\n\nexport default Input;\n"],"file":"index.js"}