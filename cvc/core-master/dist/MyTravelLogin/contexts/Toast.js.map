{"version":3,"sources":["../../../src/MyTravelLogin/contexts/Toast.tsx"],"names":["ToastContext","ToastProvider","children","messages","setMessages","addToast","type","title","description","id","toast","oldMessages","removeToast","state","filter","message","useToast","context","Error"],"mappings":"qcAAA,qDACA,2F,o/BAcA,GAAMA,CAAAA,YAAY,cAAG,yBAAgC,EAAhC,CAArB,CAEA,GAAMC,CAAAA,aAAuB,CAAG,QAA1BA,CAAAA,aAA0B,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAC9C,cAAgC,oBAAyB,EAAzB,CAAhC,wDAAOC,QAAP,eAAiBC,WAAjB,eAEA,GAAMC,CAAAA,QAAQ,CAAG,uBACb,eAAoD,IAAjDC,CAAAA,IAAiD,OAAjDA,IAAiD,CAA3CC,KAA2C,OAA3CA,KAA2C,CAApCC,WAAoC,OAApCA,WAAoC,CAAvBC,EAAuB,OAAvBA,EAAuB,CAChD,GAAMC,CAAAA,KAAK,CAAG,CACVD,EAAE,CAAFA,EADU,CAEVH,IAAI,CAAJA,IAFU,CAGVC,KAAK,CAALA,KAHU,CAIVC,WAAW,CAAXA,WAJU,CAAd,CAOAJ,WAAW,CAAC,SAACO,WAAD,qDAAqBA,WAArB,GAAkCD,KAAlC,GAAD,CACd,CAVY,CAWb,EAXa,CAAjB,CAcA,GAAME,CAAAA,WAAW,CAAG,uBAAY,SAACH,EAAD,CAAgB,CAC5CL,WAAW,CAAC,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACC,MAAN,CAAa,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACN,EAAR,GAAeA,EAA5B,CAAb,CAAX,CAAD,CACd,CAFmB,CAEjB,EAFiB,CAApB,CAIA,mBACI,gCAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEJ,QAAQ,CAARA,QAAF,CAAYO,WAAW,CAAXA,WAAZ,CAA9B,EACKV,QADL,cAEI,gCAAC,0BAAD,EAAgB,QAAQ,CAAEC,QAA1B,EAFJ,CAKP,CA3BD,C,oCA6BA,QAASa,CAAAA,QAAT,EAAsC,CAClC,GAAMC,CAAAA,OAAO,CAAG,sBAAWjB,YAAX,CAAhB,CAEA,GAAI,CAACiB,OAAL,CAAc,CACV,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8CAAV,CACT,CAED,MAAOD,CAAAA,OACV","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from \"react\";\nimport ToastContainer from \"../shared/components/ToastContainer\";\n\nexport interface ToastMessage {\n  id: string;\n  type?: \"success\" | \"error\";\n  title: string;\n  description?: string;\n}\n\ninterface ToastContextData {\n  addToast(message: Omit<ToastMessage, \"id\">): void;\n  removeToast(id: string): void;\n}\n\nconst ToastContext = createContext<ToastContextData>({} as ToastContextData);\n\nconst ToastProvider: React.FC = ({ children }) => {\n    const [messages, setMessages] = useState<ToastMessage[]>([]);\n\n    const addToast = useCallback(\n        ({ type, title, description, id }: ToastMessage) => {\n            const toast = {\n                id,\n                type,\n                title,\n                description,\n            };\n\n            setMessages((oldMessages) => [...oldMessages, toast]);\n        },\n        [],\n    );\n\n    const removeToast = useCallback((id: string) => {\n        setMessages((state) => state.filter((message) => message.id !== id));\n    }, []);\n\n    return (\n        <ToastContext.Provider value={{ addToast, removeToast }}>\n            {children}\n            <ToastContainer messages={messages} />\n        </ToastContext.Provider>\n    );\n};\n\nfunction useToast(): ToastContextData {\n    const context = useContext(ToastContext);\n\n    if (!context) {\n        throw new Error(\"useToast must be used within a ToastProvider\");\n    }\n\n    return context;\n}\n\nexport { ToastProvider, useToast };\n"],"file":"Toast.js"}