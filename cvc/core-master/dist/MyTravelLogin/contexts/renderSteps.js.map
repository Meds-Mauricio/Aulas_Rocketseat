{"version":3,"sources":["../../../src/MyTravelLogin/contexts/renderSteps.tsx"],"names":["RenderStepsContext","RenderStepsProvider","children","currentStep","setCurrentStep","prevStep","setPrevStep","toggleStepsWithModal","setStepsWithModal","hasCheckedValidationCode","setHasCheckedValidationCode","renderNewStep","step","setToggleStepsWithModal","setPreviousStep","prev","previousStep","useRenderSteps","context"],"mappings":"mXAAA,qD,o/BAYA,GAAMA,CAAAA,kBAAkB,cAAG,yBAAsC,EAAtC,CAA3B,CAEA,GAAMC,CAAAA,mBAA6B,CAAG,QAAhCA,CAAAA,mBAAgC,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CACpD,cAAsC,oBAAS,YAAT,CAAtC,wDAAOC,WAAP,eAAoBC,cAApB,eACA,eAAgC,oBAAS,EAAT,CAAhC,yDAAOC,QAAP,eAAiBC,WAAjB,eACA,eAAkD,oBAAS,KAAT,CAAlD,yDAAOC,oBAAP,eAA6BC,iBAA7B,eACA,eAAgE,oBAAS,KAAT,CAAhE,yDAAOC,wBAAP,eAAiCC,2BAAjC,eAEA,GAAMC,CAAAA,aAAa,CAAG,uBAAY,SAAAC,IAAI,CAAI,CACtCR,cAAc,CAACQ,IAAD,CACjB,CAFqB,CAEnB,EAFmB,CAAtB,CAIA,qBAAU,UAAM,CACZ,GAAGT,WAAW,GAAK,gBAAnB,CAAoC,CAChCO,2BAA2B,CAAC,IAAD,CAC9B,CACJ,CAJD,CAIG,CAACP,WAAD,CAJH,EAMA,GAAMU,CAAAA,uBAAuB,CAAG,uBAAY,UAAM,CAC9CL,iBAAiB,CAAC,CAACD,oBAAF,CACpB,CAF+B,CAE7B,CAACA,oBAAD,CAF6B,CAAhC,CAIA,GAAMO,CAAAA,eAAe,CAAG,uBAAY,SAAAC,IAAI,CAAI,CACxCT,WAAW,CAACS,IAAD,CACd,CAFuB,CAErB,EAFqB,CAAxB,CAGA,mBACI,gCAAC,kBAAD,CAAoB,QAApB,EAA6B,KAAK,CAC9B,CACIZ,WAAW,CAAXA,WADJ,CAEIa,YAAY,CAAEX,QAFlB,CAGIM,aAAa,CAAbA,aAHJ,CAIIG,eAAe,CAAfA,eAJJ,CAKID,uBAAuB,CAAvBA,uBALJ,CAMIN,oBAAoB,CAApBA,oBANJ,CAOIE,wBAAwB,CAAxBA,wBAPJ,CADJ,EAUKP,QAVL,CAaP,CArCD,C,gDAuCA,QAASe,CAAAA,cAAT,EAAkD,CAC9C,GAAMC,CAAAA,OAAO,CAAG,sBAAWlB,kBAAX,CAAhB,CAEA,MAAOkB,CAAAA,OACV","sourcesContent":["import React, { createContext, useCallback, useState, useContext, useEffect } from \"react\";\n\ninterface RenderStepsContextData {\n    currentStep: string;\n    renderNewStep(step: string | \"NewRegister\" | \"ChangePassword\"): void;\n    previousStep: string;\n    setPreviousStep(prev: string);\n    toggleStepsWithModal: boolean;\n    setToggleStepsWithModal(): void;\n    hasCheckedValidationCode: boolean\n}\n\nconst RenderStepsContext = createContext<RenderStepsContextData>({} as RenderStepsContextData);\n\nconst RenderStepsProvider: React.FC = ({ children }) => {\n    const [currentStep, setCurrentStep] = useState(\"MainScreen\");\n    const [prevStep, setPrevStep] = useState(\"\");\n    const [toggleStepsWithModal, setStepsWithModal] = useState(false);\n    const [hasCheckedValidationCode, setHasCheckedValidationCode] = useState(false)\n\n    const renderNewStep = useCallback(step => {\n        setCurrentStep(step);\n    }, []);\n\n    useEffect(() => {\n        if(currentStep === \"ValidationCode\"){\n            setHasCheckedValidationCode(true)\n        }\n    }, [currentStep])\n\n    const setToggleStepsWithModal = useCallback(() => {\n        setStepsWithModal(!toggleStepsWithModal)\n    }, [toggleStepsWithModal])\n\n    const setPreviousStep = useCallback(prev => {\n        setPrevStep(prev);\n    }, []);\n    return (\n        <RenderStepsContext.Provider value={\n            {\n                currentStep,\n                previousStep: prevStep,\n                renderNewStep,\n                setPreviousStep,\n                setToggleStepsWithModal,\n                toggleStepsWithModal,\n                hasCheckedValidationCode\n            }}>\n            {children}\n        </RenderStepsContext.Provider>\n    );\n};\n\nfunction useRenderSteps(): RenderStepsContextData {\n    const context = useContext(RenderStepsContext);\n\n    return context;\n}\n\nexport { RenderStepsProvider, useRenderSteps };\n"],"file":"renderSteps.js"}