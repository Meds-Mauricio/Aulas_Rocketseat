{"version":3,"sources":["../../src/NextBase/QueryContextData.ts"],"names":["global","dictQueryContextData","getQueryContextData","contextApiUrl","dict","qd","QueryContextData","contextData","queryContextData","revalidateContextData","exec","newVal","setTimeout","fetch","res","json"],"mappings":"glBAAA,GAAI,CAAEA,MAAD,CAAgBC,oBAArB,CACKD,MAAD,CAAgBC,oBAAhB,CAAuC,EAAvC,CAEG,QAASC,CAAAA,mBAAT,CAA6BC,aAA7B,CAAoD,CACvD,GAAMC,CAAAA,IAAI,CAAIJ,MAAD,CAAgBC,oBAA7B,CACA,GAAII,CAAAA,EAAE,CAAGD,IAAI,CAACD,aAAD,CAAb,CACA,GAAIE,EAAE,EAAI,IAAV,CAAgBD,IAAI,CAACD,aAAD,CAAJ,CAAsBE,EAAE,CAAG,GAAIC,CAAAA,gBAAJ,CAAqBH,aAArB,CAA3B,CAChB,MAAOE,CAAAA,EACV,C,GAEYC,CAAAA,gB,yBAGT,0BAAYH,aAAZ,CAAmC,6DAF3BA,aAE2B,aAD3BI,WAC2B,QAC/B,KAAKJ,aAAL,CAAqBA,aAArB,CACA,KAAKI,WAAL,CAAmB,KAAKC,gBAAL,EAAnB,CACA,KAAKC,qBAAL,CAA2B,KAA3B,CACH,C,oMAED,iBAAoCC,IAApC,oJACQA,IADR,8CAE6B,MAAKF,gBAAL,EAF7B,QAEcG,MAFd,eAGQ,GAAIA,MAAM,EAAI,IAAd,CACI,KAAKJ,WAAL,CAAmBI,MAAnB,CAJZ,OAMIC,UAAU,CAAC,iBAAM,CAAA,KAAI,CAACH,qBAAL,CAA2B,IAA3B,CAAN,CAAD,CAAyC,KAAzC,CAAV,CANJ,0D,uJASA,yBAAwB,CACpB,MAAO,MAAKF,WACf,C,6IAED,4LAE0BM,CAAAA,KAAK,CAAC,KAAKV,aAAN,CAF/B,QAEcW,GAFd,uCAGqBA,CAAAA,GAAG,CAACC,IAAJ,EAHrB,qJAKe,IALf,uE","sourcesContent":["if (!(global as any).dictQueryContextData)\n    (global as any).dictQueryContextData = {};\n\nexport function getQueryContextData(contextApiUrl: string) {\n    const dict = (global as any).dictQueryContextData;\n    let qd = dict[contextApiUrl];\n    if (qd == null) dict[contextApiUrl] = qd = new QueryContextData(contextApiUrl);\n    return qd;\n}\n\nexport class QueryContextData {\n    private contextApiUrl: string;\n    private contextData: Promise<any>;\n    constructor(contextApiUrl: string) {\n        this.contextApiUrl = contextApiUrl;\n        this.contextData = this.queryContextData();\n        this.revalidateContextData(false);\n    }\n\n    private async revalidateContextData(exec: boolean) {\n        if (exec) {\n            const newVal = await this.queryContextData();\n            if (newVal != null)\n                this.contextData = newVal;\n        }\n        setTimeout(() => this.revalidateContextData(true), 30000);\n    }\n\n    public getContextData() {\n        return this.contextData;\n    }\n\n    private async queryContextData() {\n        try {\n            const res = await fetch(this.contextApiUrl);\n            return await res.json();\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n"],"file":"QueryContextData.js"}