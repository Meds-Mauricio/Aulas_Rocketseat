{"version":3,"sources":["../../src/BrandContext/BrandContextProvider.tsx"],"names":["getHostName","req","isServer","Boolean","window","message","fullUrl","headers","host","url","document","location","href","URL","qs","searchParams","hostname","has","get","brandResolver","brands","brand","find","x","hosts","includes","BrandContextProvider","children","ClientBasedAllBrands","React","createContext","AllBrandsProvider","contextPath","InternalApp","configureAmplify","ctx","api","awsAmplifyConfig","awsConfig","data","Amplify","configure","UserDataProviderCustom","config","setConfig","BrandContext","fetchConfig","conf","ClientBasedApp"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Amplify } from \"aws-amplify\";\nimport { ProfileDataProvider } from \"../ProfileContext\";\nimport ThemeProviderCustom from \"../ThemeProviderCustom/ThemeProviderCustom\";\nimport { UserDataProvider, useUserDataContext } from \"../UserContext\";\nimport configAws from \"./amplify/aws.config\";\nimport { BrandContext, BrandContextType, useFetchAllBrands } from \"./BrandContext\";\nimport api from \"./services/api\";\n\nexport function getHostName(req?: any): { hostname: string } {\n    const isServer = Boolean(req);\n\n    if (!isServer && typeof window === \"undefined\")\n        throw { message: \"Você está chamando esse método em um contexto de servidor sem a requisição correspondente.\" };\n\n    const fullUrl = isServer ? `http://${req.headers[\"X-Forwarded-Host\"] || req.headers.host}/${req.url}` : document.location.href;\n    const url = new URL(fullUrl);\n    const qs = url.searchParams;\n    return { hostname: (qs.has(\"__contextBrandUrl\") ? qs.get(\"__contextBrandUrl\") : url.hostname) as string };\n}\n\nexport function brandResolver(brands: BrandContextType[], hostname: string): BrandContextType {\n    if (hostname == null) hostname = getHostName().hostname;\n\n    const brand = brands.find(x => x.hosts.includes(hostname || \"\"));\n    if (brand == null) throw { message: `hostname ${hostname} not found.` };\n    return brand;\n}\nexport function BrandContextProvider({ brand, brands, hostname, children }: { brand?: BrandContextType, brands?: BrandContextType[], hostname: string, children: JSX.Element }) {\n    return <BrandContext.Provider value={brand ?? brandResolver(brands!, hostname)}>{children}</BrandContext.Provider>;\n}\n\nexport const ClientBasedAllBrands = React.createContext(null);\nfunction AllBrandsProvider({ contextPath, children }) {\n    const brands = useFetchAllBrands(contextPath);\n    return <ClientBasedAllBrands.Provider value={brands}>{children}</ClientBasedAllBrands.Provider>;\n}\n\nexport function InternalApp({ hostname, children }) {\n    const brands = useContext(ClientBasedAllBrands);\n\n    if (brands == null)\n        return <div>Carregando...</div>;\n\n    return (\n        <BrandContextProvider brands={brands} hostname={hostname}>\n            <ThemeProviderCustom>\n                <UserDataProviderCustom>\n                    <ProfileDataProvider>\n                        {children}\n                    </ProfileDataProvider>\n                </UserDataProviderCustom>\n            </ThemeProviderCustom>\n        </BrandContextProvider>\n    );\n}\nasync function configureAmplify(ctx) {\n    const awsAmplifyConfig = await api.get(`/apigw/authentication/${ctx.brand}/config`);\n    const awsConfig = configAws(awsAmplifyConfig.data, ctx.hosts);\n    Amplify.configure(awsConfig);\n    return true\n}\n\nexport function UserDataProviderCustom({ children }) {\n    const [config, setConfig] = useState(false)\n    const ctx = useContext(BrandContext);\n    useEffect(() => {\n        async function fetchConfig() {\n            const conf = await configureAmplify(ctx);\n            setConfig(conf)\n        }\n        fetchConfig();\n    }, [])\n    return (\n        <UserDataProvider config={config} >\n            <ProfileDataProvider>\n                {children}\n            </ProfileDataProvider>\n        </UserDataProvider>\n\n    )\n}\nexport function ClientBasedApp({ contextPath, hostname, children }) {\n    return (\n        <AllBrandsProvider contextPath={contextPath}>\n            <InternalApp hostname={hostname}>\n                {children}\n            </InternalApp>\n        </AllBrandsProvider>\n    );\n}\n"],"file":"BrandContextProvider.js"}